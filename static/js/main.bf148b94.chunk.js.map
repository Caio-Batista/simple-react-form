{"version":3,"sources":["utils/index.js","components/Selector.js","components/Form.js","components/PictureForm.js","App.js","serviceWorker.js","index.js"],"names":["validateFormFields","fields","file","bgcolor","name","category","Selector","props","handleCategoryChange","bind","event","this","onChange","target","value","className","xmlns","width","height","viewBox","fill","d","id","disabled","selected","React","Component","Form","state","image","undefined","handleFileChange","handleSubmit","handleChangeColor","handleChangeName","length","onChangeName","onChangeCategory","url","URL","createObjectURL","files","onChangeFile","setState","onChangeColor","alert","preventDefault","onSubmit","type","placeholder","substr","color","style","backgroundColor","includes","PictureForm","pictures","onDrop","picture","concat","src","alt","App","handleModifyColor","handleModifyFile","handleModifyCategory","handleModifyName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf148b94.chunk.js","sourcesContent":["export function validateFormFields(fields) {\n    const {\n      file,\n      bgcolor,\n      name,\n      category\n    } = fields\n    return file && bgcolor && name && category\n}","import React from 'react'\n\nclass Selector extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    }\n\n    handleCategoryChange(event) {\n      this.props.onChange(event.target.value)\n    }\n\n    render() {\n      return (\n        <div>\n          <label>\n            CATEGORY\n            </label>\n            <div className=\"App-selector-container\">\n              <div className=\"App-selector-content\">\n                <div className=\"App-selector-content-children-text\">{this.props.category || 'Select your category'}</div>\n                <div className=\"App-selector-content-children\">\n                  <svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\"><g fill=\"grey\"><path d=\"M7.41 7.84L12 9.25l-6 6-6-6z\"></path></g></svg>\n                </div>\n              </div>\n                <select id=\"app-selector-input\" className=\"App-selector\" onChange={this.props.onChange}>\n                    <option value=\"\" disabled selected>Select your category</option>\n                    <option value=\"grapefruit\">Grapefruit</option>\n                    <option value=\"lime\">Lime</option>\n                    <option value=\"coconut\">Coconut</option>\n                    <option value=\"mango\">Mango</option>\n                </select>\n            </div>\n          </div>\n      );\n    }\n  }\n\nexport default Selector","import React from 'react'\nimport { validateFormFields } from '../utils';\nimport Selector from './Selector';\n\nclass Form extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {image: undefined};\n  \n      this.handleFileChange = this.handleFileChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleChangeColor = this.handleChangeColor.bind(this);\n      this.handleCategoryChange = this.handleCategoryChange.bind(this);\n      this.handleChangeName = this.handleChangeName.bind(this);\n    }\n\n    handleChangeName(event) {\n      if (event.target.value.length < 24) {\n        this.props.onChangeName(event.target.value)\n      }\n    }\n\n    handleCategoryChange(event) {\n      this.props.onChangeCategory(event.target.value)\n    }\n\n    handleFileChange(event) {\n      const url = URL.createObjectURL(event.target.files[0])\n      this.props.onChangeFile(url)\n      this.setState({ image: event.target.value });\n    }\n\n    handleChangeColor(event) {\n      if (event.target.value.length <= 6) {\n        this.props.onChangeColor(event.target.value)\n      }\n    }\n  \n    handleSubmit(event) {\n      const isFormValid = validateFormFields(this.props)\n      if (isFormValid) {\n        alert('App criada com sucesso: ' + this.state.value);\n        event.preventDefault();\n      }\n      else{\n        alert('Todos os campos precisam ser preenchidos');\n        event.preventDefault();\n      }\n    }\n\n  \n    render() {\n\n      const { image } = this.state\n      return (\n        <form className=\"App-form\" onSubmit={this.handleSubmit}>\n          <label className=\"App-main-title\">\n            Create Your App\n          </label>\n          <label>\n            APP NAME\n          </label>\n          <div className=\"App-input\">\n            <input id=\"app-name-input\" type=\"text\" placeholder=\"Enter App Display Name\" value={this.props.name} onChange={this.handleChangeName} />\n            </div>\n          <label>\n            APP ICON\n            </label>\n            <div className=\"App-selector-container\">\n              <div className=\"App-selector-content\">\n                <div className=\"App-selector-content-children-text\">{ image ? image.substr(image.length - 10) : 'Drag an image here to upload'}</div>\n                <div className=\"App-selector-content-children\">\n                  <input className=\"App-select-file-button\" type=\"submit\" placeholder=\"SELECT A FILE\" value=\"SELECT A FILE\" onChange={this.handleFileChange} />\n                </div>\n              </div>\n                <input id=\"app-icon-input\" className=\"App-selector\" placeholder=\"Enter App Display Name\" type=\"file\" name=\"file\" onChange={this.handleFileChange}/>\n          </div>\n          <label>\n            ICON'S BACKGROUND COLOR\n            </label>\n            <div className=\"App-input\">\n            <input id=\"app-color-input\" type=\"text\" placeholder=\"Pick a color\" value={this.props.color} onChange={this.handleChangeColor} />\n            <span style={{backgroundColor: this.props.color ? '#' + this.props.color : '#191919', color: this.props.color.includes('FF') ? '#191919' : '#FFFFFF'}}>{this.props.color ? '#' + this.props.color : '#191919' }</span>\n          </div>\n          <Selector\n            category={this.props.category}\n            onChange={this.handleCategoryChange}\n          />\n        </form>\n      );\n    }\n  }\n\nexport default Form","import React from 'react'\n\nclass PictureForm extends React.Component {\n    constructor(props) {\n        super(props);\n         this.state = { pictures: [] };\n         this.onDrop = this.onDrop.bind(this);\n    }\n \n    onDrop(picture) {\n        this.setState({\n            pictures: this.state.pictures.concat(picture),\n        });\n    }\n\n    handleSubmit = event => {\n      this.props.onSubmit(event)\n      event.preventDefault();\n    }\n\n    render() {\n      return (\n          <form className=\"App-card\" onSubmit={this.handleSubmit}>\n            <label className=\"flex justify-start\" > App's card preview</label>\n            <div className=\"App-profile-card\">\n              <div className=\"App-image-container\" style={{ backgroundColor : this.props.color ? `#${this.props.color}` : \"black\" }}>\n                <div className=\"\">\n                  <img src={this.props.file ? this.props.file : \"http://tachyons.io/img/logo.jpg\"} className=\"App-image\" alt=\"avatar\"/>\n                </div>\n              </div>\n              <div className=\"App-picture-form-text\">\n                  <label>{this.props.name ? this.props.name : 'App name title'}</label>\n                  <p>{this.props.category ? this.props.category : 'App category'}</p>\n                  <p>New app</p>\n              </div>\n            </div>\n            <input className=\"App-save-button\" type=\"submit\" value=\"SAVE APP\" />\n          </form>\n      )\n    }\n  }\n  // \"http://www.iworld.bh/image/cache/placeholder-350x400.png\"\n\nexport default PictureForm","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport PictureForm from './components/PictureForm';\nimport { validateFormFields } from './utils';\n\nclass App extends React.Component {\n  constructor(props) {\n      super(props);\n       this.state = {\n         bgcolor: '',\n         file: undefined,\n         category: undefined,\n         name: undefined\n        };\n  }\n\n  handleModifyColor = color => {\n    this.setState({ bgcolor: color})\n  }\n\n  handleModifyFile = file => {\n    this.setState({ file: file})\n  }\n\n  handleModifyCategory = category => {\n    this.setState({ category: category})\n  }\n\n  handleModifyName = name => {\n    this.setState({ name: name})\n  }\n\n  handleSubmit = (event) => {\n    const isFormValid = validateFormFields(this.state)\n    if (isFormValid) {\n      alert('App criada com sucesso: ' + this.state.name);\n    }\n    else{\n      alert('Todos os campos precisam ser preenchidos');\n    }\n    event.preventDefault();\n  }\n\n  render() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"flex-column-n App-bkg\">\n          <div className=\"flex-column-n App-logo\">\n            <Form\n              color={this.state.bgcolor}\n              file={this.state.file}\n              category={this.state.category}\n              name={this.state.name}\n              onChangeColor={this.handleModifyColor}\n              onChangeFile={this.handleModifyFile}\n              onChangeCategory={this.handleModifyCategory}\n              onChangeName={this.handleModifyName}\n              onSubmit={this.handleSubmit} />\n          </div>\n          <div className=\"App-vertical-line\" >\n            <div className=\"verticalLine\" />\n          </div>\n          <div className=\"App-card-form\">\n            <PictureForm\n              color={this.state.bgcolor}\n              file={this.state.file}\n              name={this.state.name}\n              category={this.state.category}\n              onSubmit={this.handleSubmit} />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}