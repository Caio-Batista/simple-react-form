{"version":3,"sources":["utils/index.js","components/Selector.js","components/BackgroundInput.js","components/ImageInput.js","components/NameInput.js","components/Form.js","components/PictureForm.js","App.js","serviceWorker.js","index.js"],"names":["validateFormFields","fields","file","bgcolor","name","category","Selector","className","this","props","xmlns","width","height","viewBox","fill","d","id","onChange","value","disabled","selected","React","Component","BackgroundInput","type","placeholder","color","style","backgroundColor","includes","ImageInput","image","substr","length","NameInput","Form","state","undefined","handleFileChange","bind","handleSubmit","handleChangeColor","handleCategoryChange","handleChangeName","event","target","onChangeName","onChangeCategory","url","files","URL","createObjectURL","onChangeFile","setState","onChangeColor","alert","preventDefault","onSubmit","PictureForm","pictures","onDrop","picture","concat","src","alt","App","handleModifyColor","handleModifyFile","handleModifyCategory","handleModifyName","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6f61907.chunk.js","sourcesContent":["export function validateFormFields(fields) {\n    const {\n      file,\n      bgcolor,\n      name,\n      category\n    } = fields\n    return file && bgcolor && name && category\n}","import React from 'react'\n\nclass Selector extends React.Component {\n\n    render() {\n      return (\n        <div>\n          <label>\n            CATEGORY\n            </label>\n            <div className=\"App-selector-container\">\n              <div className=\"App-selector-content\">\n                <div className=\"App-selector-content-children-text\">{this.props.category || 'Select your category'}</div>\n                <div className=\"App-selector-content-children\">\n                  <svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\"><g fill=\"grey\"><path d=\"M7.41 7.84L12 9.25l-6 6-6-6z\"></path></g></svg>\n                </div>\n              </div>\n                <select id=\"app-selector-input\" className=\"App-selector\" onChange={this.props.onChange}>\n                    <option value=\"\" disabled selected>Select your category</option>\n                    <option value=\"grapefruit\">Grapefruit</option>\n                    <option value=\"lime\">Lime</option>\n                    <option value=\"coconut\">Coconut</option>\n                    <option value=\"mango\">Mango</option>\n                </select>\n            </div>\n          </div>\n      );\n    }\n  }\n\nexport default Selector","import React from 'react'\n\nclass BackgroundInput extends React.Component {\n\n    render() {\n      return (\n        <div>\n          <label>\n            ICON'S BACKGROUND COLOR\n            </label>\n            <div className=\"App-input\">\n            <input\n              id=\"app-color-input\"\n              type=\"text\"\n              placeholder=\"Pick a color\"\n              value={this.props.color}\n              onChange={this.props.onChange} />\n            <span \n              className=\"App-color-span\"\n              style={{ \n                backgroundColor: \n                  this.props.color ? '#' + this.props.color : '#191919',\n                color: this.props.color.includes('FF') ? '#191919' : '#FFFFFF'}}>\n                {this.props.color ? '#' + this.props.color : '#191919' }\n            </span>\n          </div>\n          </div>\n      );\n    }\n  }\n\nexport default BackgroundInput","import React from 'react'\n\nclass ImageInput extends React.Component {\n\n    render() {\n\n      const { image } = this.props\n      return (\n        <div>\n          <label>\n            APP ICON\n            </label>\n            <div className=\"App-selector-container\">\n              <div className=\"App-selector-content\">\n                <div className=\"App-selector-content-children-text\">{ image ? image.substr(image.length - 10) : 'Drag an image here to upload'}</div>\n                <div className=\"App-selector-content-children\">\n                  <input className=\"App-select-file-button\" type=\"submit\" placeholder=\"SELECT A FILE\" value=\"SELECT A FILE\" onChange={this.props.onChange} />\n                </div>\n              </div>\n                <input id=\"app-icon-input\" className=\"App-selector\" placeholder=\"Enter App Display Name\" type=\"file\" name=\"file\" onChange={this.props.onChange}/>\n          </div>\n        </div>\n      );\n    }\n  }\n\nexport default ImageInput","import React from 'react'\n\nclass NameInput extends React.Component {\n\n    render() {\n      return (\n        <div>\n          <label>\n            APP NAME\n          </label>\n          <div className=\"App-input\">\n            <input id=\"app-name-input\" type=\"text\" placeholder=\"Enter App Display Name\" value={this.props.name} onChange={this.props.onChange} />\n          </div>\n        </div>\n      );\n    }\n  }\n\nexport default NameInput","import React from 'react'\nimport { validateFormFields } from '../utils';\nimport Selector from './Selector';\nimport BackgroundInput from './BackgroundInput';\nimport ImageInput from './ImageInput';\nimport NameInput from './NameInput';\n\nclass Form extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {image: undefined};\n  \n      this.handleFileChange = this.handleFileChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleChangeColor = this.handleChangeColor.bind(this);\n      this.handleCategoryChange = this.handleCategoryChange.bind(this);\n      this.handleChangeName = this.handleChangeName.bind(this);\n    }\n\n    handleChangeName(event) {\n      if (event.target.value.length < 24) {\n        this.props.onChangeName(event.target.value)\n      }\n    }\n\n    handleCategoryChange(event) {\n      this.props.onChangeCategory(event.target.value)\n    }\n\n    handleFileChange(event) {\n      const url = event.target.files && URL.createObjectURL(event.target.files[0])\n      this.props.onChangeFile(url)\n      this.setState({ image: event.target.value });\n    }\n\n    handleChangeColor(event) {\n      if (event.target.value.length <= 6) {\n        this.props.onChangeColor(event.target.value)\n      }\n    }\n  \n    handleSubmit(event) {\n      const isFormValid = validateFormFields(this.props)\n      if (isFormValid) {\n        alert('App criada com sucesso: ' + this.state.value);\n        event.preventDefault();\n      }\n      else{\n        alert('Todos os campos precisam ser preenchidos');\n        event.preventDefault();\n      }\n    }\n\n  \n    render() {\n\n      const { image } = this.state\n      return (\n        <form className=\"App-form\" onSubmit={this.handleSubmit}>\n          <label className=\"App-main-title\">\n            Create Your App\n          </label>\n          <NameInput\n            name={this.props.name}\n            onChange={this.handleChangeName}\n          />\n          <ImageInput\n            image={image}\n            onChange={this.handleFileChange}\n          />\n          <BackgroundInput\n            color={this.props.color}\n            onChange={this.handleChangeColor}\n          />\n          <Selector\n            category={this.props.category}\n            onChange={this.handleCategoryChange}\n          />\n        </form>\n      );\n    }\n  }\n\nexport default Form","import React from 'react'\n\nclass PictureForm extends React.Component {\n    constructor(props) {\n        super(props);\n         this.state = { pictures: [] };\n         this.onDrop = this.onDrop.bind(this);\n    }\n \n    onDrop(picture) {\n        this.setState({\n            pictures: this.state.pictures.concat(picture),\n        });\n    }\n\n    handleSubmit = event => {\n      this.props.onSubmit(event)\n      event.preventDefault();\n    }\n\n    render() {\n      return (\n          <form className=\"App-card\" onSubmit={this.handleSubmit}>\n            <label className=\"flex justify-start\" > App's card preview</label>\n            <div className=\"App-profile-card\">\n              <div className=\"App-image-container\" style={{ backgroundColor : this.props.color ? `#${this.props.color}` : \"black\" }}>\n                <div className=\"\">\n                  <img src={this.props.file ? this.props.file : \"http://tachyons.io/img/logo.jpg\"} className=\"App-image\" alt=\"avatar\"/>\n                </div>\n              </div>\n              <div className=\"App-picture-form-text\">\n                  <label>{this.props.name ? this.props.name : 'App name title'}</label>\n                  <p>{this.props.category ? this.props.category : 'App category'}</p>\n                  <p>New app</p>\n              </div>\n            </div>\n            <input className=\"App-save-button\" type=\"submit\" value=\"SAVE APP\" />\n          </form>\n      )\n    }\n  }\n  // \"http://www.iworld.bh/image/cache/placeholder-350x400.png\"\n\nexport default PictureForm","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport PictureForm from './components/PictureForm';\nimport { validateFormFields } from './utils';\n\nclass App extends React.Component {\n  constructor(props) {\n      super(props);\n       this.state = {\n         bgcolor: '',\n         file: undefined,\n         category: undefined,\n         name: undefined\n        };\n  }\n\n  handleModifyColor = color => {\n    this.setState({ bgcolor: color})\n  }\n\n  handleModifyFile = file => {\n    this.setState({ file: file})\n  }\n\n  handleModifyCategory = category => {\n    this.setState({ category: category})\n  }\n\n  handleModifyName = name => {\n    this.setState({ name: name})\n  }\n\n  handleSubmit = (event) => {\n    const isFormValid = validateFormFields(this.state)\n    if (isFormValid) {\n      alert('App criada com sucesso: ' + this.state.name);\n      console.log(`{\"name\": \"${this.state.name}\",\n       \"color\": \"${this.state.bgcolor}\",\n       \"category\": \"${this.state.category}\",\n       \"file\": \"${this.state.file}\"}`)\n    }\n    else{\n      alert('Todos os campos precisam ser preenchidos');\n    }\n    event.preventDefault();\n  }\n\n  render() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"flex-column-n App-bkg\">\n          <div className=\"flex-column-n App-logo\">\n            <Form\n              color={this.state.bgcolor}\n              file={this.state.file}\n              category={this.state.category}\n              name={this.state.name}\n              onChangeColor={this.handleModifyColor}\n              onChangeFile={this.handleModifyFile}\n              onChangeCategory={this.handleModifyCategory}\n              onChangeName={this.handleModifyName}\n              onSubmit={this.handleSubmit} />\n          </div>\n          <div className=\"App-vertical-line\" >\n            <div className=\"verticalLine\" />\n          </div>\n          <div className=\"App-card-form\">\n            <PictureForm\n              color={this.state.bgcolor}\n              file={this.state.file}\n              name={this.state.name}\n              category={this.state.category}\n              onSubmit={this.handleSubmit} />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}